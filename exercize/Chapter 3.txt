//*3.58

long decode(long x,long y,long z){
	long temp=y-z;
	return ((temp<<63)>>63)^(temp*x);
}

//**3.59
/*
 * void store_prod(int_t *dest,int64_t x,int_64 y)
 * dest in %rdi,x in %rdx,y in %rsi
 * xh=x>>63,yh=y>>63
 * p=x*y=(2^128*xh*yh+2^64*(xh*yl+yh*xl)+xl*yl)%(2^128)
 * ph=xh*yl+yh*xl,pl=xl*yl
 */
store_prod:
  movq	 %rdx,%rax	// x 复制到%rax
  cqto				// 读出%rax的符号位，复制到%rdx的所有位,rdx=xh
  movq	 %rsi,%rcx	// y 复制到%rcx
  sarq	 $63,%rcx	// %rcx为y的符号位,即%rcx=yh
  imulq  %rax,%rcx	// 计算xl*yh
  imulq  %rsi,%rdx	// 计算yl*xh
  addq   %rdx,%rcx	// 计算xl*yh+yl*xh
  mulq   %rsi		// 计算xl*yl,结果保存在%rax,%rdx
  addq   %rcx,%rdx	// xl*yh+yl*xh保存在%rdx
  movq   %rax,(%rdi)// 保存低64位
  movq   %rdx,8(%rdi)// 保存高64位
  ret
  
//**3.60

A.
x %rdi
n %esi
result %rax
mask %rdx
  
B.
result=0
mask=1

C.
mask!=0

D.
mask=mask<<name

E.
long loop(long x,int n)
{
	long result=0;
	long mask;
	for(mask=1;mask!=0;mask=mask<<n){
		result|=(x&mask);
	}
	return result;
}

//**3.61
/*
 * 条件控制的形式如下：
 * if(!test-expr)
 *     goto false;
 * v=then-expr;
 * goto done;
 * false:
 *     v=esle-expr;
 * done:
 */
	
long cread(long *xp){
	return (!xp?0:*xp);//当xp!=NULL时，才会将*xp赋值给%rax
}

//**3.62

/* Enumerated type creates set of constants numbered 0 and upward */
typedef enum{MODE_A,MODE_B,MODE_C,MODE_D,MODE_E} mode_t;
long switch3(long *p1,long *p2,mode_t action)
{
	long result=0;
	switch(action){
	case MODE_A:
		result=*p2;
		*p2=*p1;
		break;
	case MODE_B:
		result=*p1+*p2;
		*p1=result;
		break;
	case MODE_C:
		*p1=59;
		result=*p2;
		break;
	case MODE_D:
		*p1=*p2;
		result=27;
		break;
	case MODE_E:
		result=27;break;
	default:
		result=12;break;
	}
	return result;
}

//**3.63

long switch_prob(long x,long n){
	long result=x;
	switch(n){
	case 60:
	case 62:
		result=8*x;
		break;
	case 63:
		result=x>>3;
		break;
	case 64:
		result=x<<4-x;
	case 65:
		x=x*x;
	default:
		result=x+75;break;
	}
	return result;
}

//***3.64

A.
对于A[R][S][T]:
A[i][j][k]=Xd+(S*T*i+T*j+k)*L

B.
R=7,S=5,T=13

//*3.65

A.%rdx
B.%rax
C.
A[i+1][j]=A[i][j]+8;
A[j][i+1]=A[j][i]+8*M=A[j][i]+120;
M=15;

//*3.66

Rc=3*n;
NC=4*n+1;

//**3.67
//这道题不想做,参考网上答案:)
//http://blog.csdn.net/scf0920/article/details/77543294

B.
传的是%rsp+64表示的栈地址,而不是结构体s.

C.
直接通过%rsp+偏移量的栈地址来访问的s的值.

D.
通过所传的表示栈地址的参数,来间接存储在栈上.

F.
在涉及结构体这种无法用一个寄存器存储的参数时,不管
是传入还是返回,都是直接通过在栈上的存储来进行访问的

//***3.68

4<B<=8;
6<A<=10;
176<4*A*B<=184;
所以A=9;B=5;

//***3.69

A.
CNT=7
B.
typedef struct{
	long idx;
	long x[4];
}a_struct;

//***3.70

A.
e1.p  0
e1.y  8
e2.x  0
e2.next  8

B.
16

C.
void proc(union ele *up){
	up->e2.x=*((up->e2.next)->e1.p)-up->e1.y;
}

//*3.71

void good_echo(void){
	char buf[SIZE];
	while(1){
		char *p=fgets(buf,SIZE,stdin);
		if(p==NULL){
			break;
		}
		printf("%s",p);
	}
}

//**3.72

A.
s2=s1-((n*8+30)&0xfffffff0)
当n为奇数时，s2=s1-(n*8+24)
当n为偶数时，s2=s1-(n*8+16)

B.
p=(s2+15)&0xfffffff0
p为大于s2的最小的16的倍数

C.
e1最大为24，此时n为奇数，s1%16=0;
e1最小为1，此时n为偶数，s1%16=1;

D.
s2保证8*n字节的容量. 
p保证向16对齐.

//*3.73

find_range:
   vxorps %xmm1,%xmm1,%xmm1
   vucomiss %xmml,%xmm0
   jp .L1
   jp .L1
   ja .L2
   jb .L3
   je .L4
   .L2:
   movl $2, %eax
   jmp .Done
   .L3:
   movl $0, %eax
   jmp .Done
   .L4:
   movl $1, %eax
   jmp .Done
   .L1:
   movl $3, %eax
   .Done

//**3.74

find_range:
    vxorps %xmm1, %xmm1, %xmm1
    movq $0, %r8
    movq $1, %r9
    movq $2, %r10
    movq $3, %rax
    vucomiss %xmm1, %xmm0
    cmovl %r8, %rax
    cmove %r9, %rax
    cmova %r10, %rax
	
//*3.75

A.
real部分%mm(2*n)
image部分%mm(2*n+1)
B.
real%mm0
image%mm1